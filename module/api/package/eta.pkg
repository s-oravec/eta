create or replace package eta as

    -- Package name
    PACKAGE_NAME   constant varchar2(30) := '&&g_package_name';
    function get_package_name return varchar2;

    -- Package SQL Name compatible version
    SQL_VERSION    constant varchar2(30) := '&&g_sql_version';
    function get_sql_version return varchar2;

    -- Semver version
    SEMVER_VERSION constant varchar2(30) := '&&g_semver_version';
    function get_semver_version return varchar2;

    /**

    ETA interval SubType

    */
    subtype eta_interval is interval day(9) to second(6);

    /**

    Sets total work in session and stores timestamp of call as start of processing timestamp

    @param total_work total work units count

    */
    procedure set_total_work(total_work in pls_integer);

    /**

    Get ETA interval computed from total work set, start timestamp (see set_total_work) and count of units processed so far

    @param sofar count of units processed so far
    @return computed ETA interval

    */
    function get(sofar in pls_integer) return eta_interval;

    /**

    Get ETA interval computed from total work set, start timestamp and count of units processed so far.

    @param started_at timestamp of start
    @param total_Work total count of work units to be processed
    @param sofar count of units processed so far
    @return computed ETA interval

    */
    function get (
        started_at in timestamp,
        total_work in pls_integer,
        sofar      in pls_integer
    ) return eta_interval;

    DAYS_DEFAULT      constant pls_integer := 0;
    FRACTIONS_DEFAULT constant pls_integer := 0;

    /**

    Formats ETA interval as string with **days** position for days and **fractions** positions for fractions of second.

    @param sofar - count of work items already processed
    @param days - days positions
    @param fractions - fractions positions
    @return ETA interval formatted as string

    */
    function get_formatted
    (
        sofar     in pls_integer,
        days      in pls_integer default DAYS_DEFAULT,
        fractions in pls_integer default FRACTIONS_DEFAULT
    ) return varchar2;

    /**

    Formats ETA interval as string based on total work and start timestamp set by set_total_work and **sofar** with **days** position for days and **fractions** positions for fractions of second.

    @param started_at - timestamp of start of the processing
    @param total_work - total count of work items to be processed
    @param sofar - count of work items already processed
    @param days - days positions
    @param fractions - fractions positions

    */
    function get_formatted
    (
        started_at in timestamp,
        total_work in pls_integer,
        sofar      in pls_integer,
        days       in pls_integer default DAYS_DEFAULT,
        fractions  in pls_integer default FRACTIONS_DEFAULT
    ) return varchar2;

end;
/
create or replace package body eta as

    ----------------------------------------------------------------------------
    function get_package_name return varchar2 is
    begin
        return PACKAGE_NAME;
    end;

    ----------------------------------------------------------------------------
    function get_sql_version return varchar2 is
    begin
        return SQL_VERSION;
    end;

    ----------------------------------------------------------------------------
    function get_semver_version return varchar2 is
    begin
        return SEMVER_VERSION;
    end;

    ----------------------------------------------------------------------------
    procedure set_total_work(total_work in pls_integer) is
    begin
        eta_impl.setTotalWork(total_work);
    end;

    ----------------------------------------------------------------------------
    function get(sofar in pls_integer) return eta_interval is
    begin
        return eta_impl.get(sofar);
    end;

    ----------------------------------------------------------------------------
    function get(
        started_at in timestamp,
        total_work in pls_integer,
        sofar      in pls_integer
    ) return eta_interval is
    begin
        return eta_impl.get(started_at, total_work, sofar);
    end;

    ----------------------------------------------------------------------------
    function get_formatted
    (
        sofar     in pls_integer,
        days      in pls_integer default DAYS_DEFAULT,
        fractions in pls_integer default FRACTIONS_DEFAULT
    ) return varchar2 is
        l_days      pls_integer := nvl(days, DAYS_DEFAULT);
        l_fractions pls_integer := nvl(fractions, FRACTIONS_DEFAULT);
    begin
        return eta_impl.getFormatted(sofar, l_days, l_fractions);
    end;

    ----------------------------------------------------------------------------
    function get_formatted
    (
        started_at in timestamp,
        total_work in pls_integer,
        sofar      in pls_integer,
        days       in pls_integer default DAYS_DEFAULT,
        fractions  in pls_integer default FRACTIONS_DEFAULT
    ) return varchar2 is
        l_days      pls_integer := nvl(days, DAYS_DEFAULT);
        l_fractions pls_integer := nvl(fractions, FRACTIONS_DEFAULT);
    begin
        return eta_impl.getFormatted(started_at, total_work, sofar, l_days, l_fractions);
    end;

end;
/
